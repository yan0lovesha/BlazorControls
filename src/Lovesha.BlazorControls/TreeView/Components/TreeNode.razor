@using Lovesha.BlazorControls.TreeView

<div class="tree-node">
    <div class="tree-parent">
        @if (isLoading)
        {
            <span class="loading-icon spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        }
        else
        {
            <span class="collapse-icon @Icon" @onclick="ExpandNode"></span>
        }
        <span class="tree-node-text @SelectedStyle" @onclick="NodeTextClicked">@NodeObj.Text</span>
    </div>
    @if (NodeObj.IsExpanded && NodeObj.ChildNodes.Count > 0)
    {
        <div class="tree-children">
            @foreach (var child in NodeObj.ChildNodes)
            {
                <TreeNode NodeObj="@child"></TreeNode>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public TreeNodeObject NodeObj { get; set; }

    [CascadingParameter]
    private TreeView ContainerTreeView { get; set; }

    bool isLoading = false;

    string Icon
    {
        get
        {
            if (NodeObj.IsExpanded)
            {
                return "oi oi-chevron-bottom";
            }
            else
            {
                return "oi oi-chevron-right";
            }
        }
    }

    string SelectedStyle
    {
        get
        {
            if (ContainerTreeView.SelectedNode == NodeObj)
            {
                return "selected";
            }
            return "";
        }
    }

    private async void ExpandNode()
    {
        if (NodeObj.IsExpanded)
        {
            if (NodeObj.AlwaysReloadChildren)
            {
                NodeObj.ChildNodes.Clear();
            }
        }
        else
        {
            if (NodeObj.AlwaysReloadChildren || NodeObj.ChildNodes.Count == 0)
            {
                if (NodeObj?.LoadChildNodesFunc != null)
                {
                    isLoading = true;
                    StateHasChanged();
                    var nodes = await NodeObj?.LoadChildNodesFunc(NodeObj);
                    NodeObj.ChildNodes.AddRange(nodes);
                }
            }
        }
        NodeObj.IsExpanded = !NodeObj.IsExpanded;
        isLoading = false;
        StateHasChanged();

        if (!NodeObj.IsExpanded && ContainerTreeView.OnNodeCollapsed != null)
        {
            ContainerTreeView.OnNodeCollapsed(NodeObj);
        }
        if (NodeObj.IsExpanded && ContainerTreeView.OnNodeExpanded != null)
        {
            ContainerTreeView.OnNodeExpanded(NodeObj);
        }
    }

    private void NodeTextClicked()
    {
        ContainerTreeView.NodeSelected(NodeObj);
    }
}